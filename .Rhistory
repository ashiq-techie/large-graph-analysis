vector = read.table("raw_data")
raw_data
vector = read.table("raw_data")
read.table(raw_data)
raw_data <- read.table(file)
raw_data
vector <- read.table(file)
normal = rnorm(1000, mean(vector), sd(vector))
normal = rnorm(1000, mean(vector), sd(vector))
mean(vector)
normal = rnorm(1000, mean(vector.V1), sd(vector.V1))
View(vector)
mean(vector)
summary(vector)
normal = rnorm(1000, mean(vector$V1), sd(vector$V1))
plot.ccdf(normal)
plot.ccdf(weibull)
rpareto <- function(n, xm, alpha) qpareto(runif(n), xm, alpha)
pareto = rpareto(1000, mean(vector$V1), sd(vector$V1))
qpareto <- function(p, xm, alpha) ifelse(p < 0 | p > 1, NaN, xm*(1-p)**(-1/alpha))
pareto = rpareto(1000, mean(vector$V1), sd(vector$V1))
plot.ccdf(pareto)
library(MASS)
fitdistr(vector,"normal")
fitdistr(vector$V1,"normal")
fitdistr
fitdistr(vector$V1,"normal")
fitdistr(vector$V1,"gamma")
fitdistr(vector$V1,"weibull")
fitdistr(vector$V1, "poisson")
normal = rnorm(10000)
poisson = rpois(10000)
poisson = rpois(10000,1)
gamma = rgamma(10000)
gamma = rgamma(10000,2)
weibull = rweibull(10000,2)
fit_normal = fitdistr(normal, "normal")
qqplot(fit_normal)
fit_weibull = fitdistr(weibull, "weibull")
fit_gamma = fitdistr(gamma, "gamma")
fit_poisson = fitdistr(poisson,"poisson")
qqplot(fit_gamma,fit_normal,fit_poisson,fit_weibull)
qqplot(fit_gamma,fit_normal)
qqplot(fit_gamma, "gamma")
fit_gamma
qqplot(gamma, "gamma")
simdata <- qexp(ppoints(length(gamma)), rate = params$estimate)
simdata <- qexp(ppoints(length(gamma)), rate = fit_gamma$estimate)
qqplot(gamma, simdata)
simdata <- qexp(ppoints(length(poisson)), rate = fit_poisson$estimate)
qqplot(poisson,simdata)
simdata <- qexp(ppoints(length(weibull)), rate = fit_weibull$estimate)
qqplot(weibull,simdata)
simdata <- qexp(ppoints(length(normal)), rate = fit_normal$estimate)
qqplot(normal,simdata)
source('~/Desktop/ccdf.R')
source('~/Desktop/ccdf.R')
View(add.ccdf)
save.image("~/ccdf.RData")
setwd("~/Desktop/coursework/digitalmedia")
edges = read.table("Wiki-Vote.txt")
library("igraph")
graph = graph.data.frame(edges)
summary(graph)
is.connected(graph)
no.clusters(graph)
table(clusters(graph)$csize)
max(degree(graph, mode="in"))
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
mean(degree(graph, mode="in"))
mean(degree(graph))
plot(degree.distribution(graph), log="xy")
fcomm <- fastgreedy.community(graph)
ebc <- edge.betweenness.community(graph, directed=T)
ebc <- edge.betweenness.community(graph, directed=T)
graph = simplify(graph)
ebc <- edge.betweenness.community(graph, directed=T)
fcomm <- fastgreedy.community(as.undirected(graph))
memb <- community.to.membership(graph,fcomm$merges,which.max(fcomm$modularity))
memb <- cutat(fcomm, which.max(fcomm$modularity))
lay <- layout.drl(graph)
lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "grey"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
colbar <- rainbow(5)
col <- colbar[memb+1]
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
clear
clear()
library("igraph")
library("igraph")
edges = read.table("p2p-Gnutella09.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
ebc <- edge.betweenness.community(graph, directed=T)
library("igraph")
edges = read.table("p2p-Gnutella09.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, which.max(fcomm$modularity))
#layout for the graph
lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "grey"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
library("igraph")
edges = read.table("p2p-Gnutella09.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
mean(degree(graph, mode="all"))
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, which.max(fcomm$modularity))
#layout for the graph
lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "grey"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
ssizes(fcomm)
sizes(fcomm)
length((sizes(fcomm))
length((sizes(fcomm))
0
size((sizes(fcomm))
length(sizes(fcomm))
library("igraph")
edges = read.table("p2p-Gnutella09.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
mean(degree(graph, mode="all"))
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, which.max(fcomm$modularity))
#layout for the graph
lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "black"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
library("igraph")
edges = read.table("Wiki-Vote.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
ebc <- edge.betweenness.community(graph, directed=T)
library("igraph")
edges = read.table("Wiki-Vote.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, which.max(fcomm$modularity))
#layout for the graph
lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "pink"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
col[is.na(col)] <- "red"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
col[is.na(col)] <- "black"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
library("igraph")
edges = read.table("Wiki-Vote.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, which.max(fcomm$modularity))
#layout for the graph
#lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "red"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
library("igraph")
edges = read.table("Wiki-Vote.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
#fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, steps=which.max(fcomm$modularity))
#layout for the graph
#lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "red"
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
library("igraph")
edges = read.table("Wiki-Vote.txt")
graph = graph.data.frame(edges) #creating a graph
no.clusters(graph) #no. of components
#Calcuate Maximum Vertex In degree
max(degree(graph, mode="in"))
# In-degree distribution
#plot(degree.distribution(graph, mode="in"), log="xy")
#Calcuate Maximum Vertex out degree
max(degree(graph, mode="out"))
# In-degree distribution
#plot(degree.distribution(graph, mode="out"), log="xy")
#To find Communities
#Finding the edge betweenness
#ebc <- edge.betweenness.community(graph, directed=T)
#
# #Modularity for each merge
# mods <- sapply(0:ecount(graph), function(i){
#   graph2 <- delete.edges(graph, ebc$removed.edges[seq(length=i)])
#   clust <- clusters(graph2)$membership
#   modularity(graph,clust)
# })
#
# #plot all modularities
# plot(mods, pch=20)
#
# # giving different colors for identification of clusters
# graph2<-delete.edges(graph, ebc$removed.edges[seq(length=which.max(mods)-1)])
# V(graph)$color=clusters(graph2)$membership
#
# #graph Layout
# graph$layout <- layout.fruchterman.reingold
#
# plot(graph, vertex.label=NA)
#greedy method
#fcomm <- fastgreedy.community(as.undirected(graph))
#to find membership attribute
memb <- cutat(fcomm, steps=which.max(fcomm$modularity))
#layout for the graph
#lay <- layout.drl(graph = graph)
empt <- graph.empty(n=vcount(graph))
colbar <- rainbow(5)
col <- colbar[memb+1]
col[is.na(col)] <- "gray"
#Plotting the community
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=lay, vertex.size=1,vertex.label=NA,log='xy', asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=lay, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col, log="xy")
plot(empt, layout=lay, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col, log="xy")
plot(empt, layout=lay, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=lay, vertex.size=4, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=lay, vertex.size=4,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=lay, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
graph.density(graph)
transitivity(graph)
plot(empt, layout=fruchterman.reingold, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=layout.fruchterman.reingold, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=layout.sphere, vertex.size=4,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=layout.fruchterman.reingold, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=layout.sphere, vertex.size=1,vertex.label=NA, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=layout.sphere, vertex.size=1, asp=FALSE,vertex.color=col,vertex.frame.color=col)
plot(empt, layout=layout.fruchterman.reingold, vertex.size=1, asp=FALSE,vertex.color=col,vertex.frame.color=col)
V(graph)
E(graph)
sub_graph <- V(graph)[degree(graph)<3]
plot(sub_graph)
length(sub_graph)
length(graph)
new_graph <- delete.vertices(graph = graph, sub_graph)
sub_graph <- V(graph)[degree(graph)<5]
new_graph <- delete.vertices(graph = graph, sub_graph)
V(new_graph)$size<-degree(new_graph)/10
par(mai=c(0,0,1,0))
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/10,vertex.color=col,vertex.frame.color=col)
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/10,vertex.color=col,vertex.frame.color=blue)
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/10,vertex.color=col,vertex.frame.color='blue')
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/100,vertex.color=col,vertex.frame.color='blue')
V(new_graph)$size
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/40,vertex.color=col,vertex.frame.color='blue')
sub_graph <- V(graph)[degree(graph)<20]
new_graph <- delete.vertices(graph = graph, sub_graph)
V(new_graph)$size<-degree(new_graph)/10
par(mai=c(0,0,1,0))
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/37,vertex.color=col,vertex.frame.color=col)
V(new_graph)$size
sub_graph <- V(graph)[(degree(graph)/10)<20]
new_graph <- delete.vertices(graph = graph, sub_graph)
V(new_graph)$size<-degree(new_graph)/10
par(mai=c(0,0,1,0))
plot(new_graph, layout=layout.fruchterman.reingold,vertex.label.font=2, vertex.label.cex=V(new_graph)$size/37,vertex.color=col,vertex.frame.color=col)
